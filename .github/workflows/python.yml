name: "Python Bindings"
'on':
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - '**'
env:
  qt_version: "6.2.1" # only used by build-macos
  ccache_basedir: ${{ github.workspace }}
  ccache_dir: "${{ github.workspace }}/.ccache"
  ccache_compilercheck: content
  ccache_compress: 'true'
  ccache_compresslevel: 9
  ccache_maxsize: 200M
  ccache_cmake: -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache

jobs:
    python-ubuntu:
      strategy:
        fail-fast: false
        matrix:
          include:
              - name: "Ubuntu 18.04 / py3.6"
                os: "ubuntu-18.04"
                python-version: "3.6"
              - name: "Ubuntu 18.04 / py3.7"
                os: "ubuntu-18.04"
                python-version: "3.7"
              - name: "Ubuntu 20.04 / py3.8"
                os: "ubuntu-20.04"
                python-version: "3.8"
              - name: "Ubuntu 20.04 / py3.9"
                os: "ubuntu-20.04"
                python-version: "3.9"
              - name: "Ubuntu 20.04 / py3.10"
                os: "ubuntu-20.04"
                python-version: "3.10"

      name: ${{ matrix.name }}
      runs-on: ${{ matrix.os }}
      steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}


      - name: Install Dependencies
        run: |-
          sudo apt-get update
          sudo apt-get install -y \
            ccache  libprotobuf-dev protobuf-compiler \
            libboost-all-dev libibus-1.0-dev  \
            qttools5-dev qtbase5-dev libqt5svg5-dev libarchive-dev \
            pybind11-dev python3-setuptools python3-pybind11 

      - name: Install MKL
        run: |-
          wget -qO- "https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB" | sudo apt-key add -
          sudo sh -c "echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list"
          sudo apt-get update -o Dir::Etc::sourcelist="/etc/apt/sources.list.d/intel-mkl.list"
          sudo apt-get install -y --no-install-recommends intel-mkl-64bit-2020.0-088

      - name: Generate ccache_vars for ccache based on machine
        shell: bash
        id: ccache_vars
        run: |-
          echo "::set-output name=hash::$(echo ${{ env.ccache_compilercheck }})"
          echo "::set-output name=timestamp::$(date '+%Y-%m-%dT%H.%M.%S')"

      - name: Cache-op for build-cache through ccache
        uses: actions/cache@v2
        with:
          path: ${{ env.ccache_dir }}
          key: ccache-${{ matrix.name }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}-${{ steps.ccache_vars.outputs.timestamp }}
          restore-keys: |-
            ccache-${{ matrix.name }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}
            ccache-${{ matrix.name }}-${{ steps.ccache_vars.outputs.hash }}
            ccache-${{ matrix.name }}
      - name: ccache environment setup
        run: |-
          echo "CCACHE_COMPILER_CHECK=${{ env.ccache_compilercheck }}" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=${{ env.ccache_basedir }}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=${{ env.ccache_compress }}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=${{ env.ccache_compresslevel }}" >> $GITHUB_ENV
          echo "CCACHE_DIR=${{ env.ccache_dir }}" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=${{ env.ccache_maxsize }}" >> $GITHUB_ENV

      - name: ccache prolog
        run: |-
          ccache -s # Print current cache stats
          ccache -z # Zero cache entry
      - name: setup.py 
        run: |-
          python3 -m pip install wheel
          BUILD_ARCH=core-avx-i python3 setup.py bdist_wheel --universal

      # We're happy with just compile for the moment, so cache gets some seeding.
      - name: Install onto root python lib
        run: |-
          python3 -m pip install --ignore-installed dist/bergamot-*.whl 

      - name: Fetch models from translateLocally repository.
        run: |-
          python3 -m bergamot download 

      - name: Run the sample python script shipped with module
        run: |-
          python3 -m bergamot translate --model en-de-tiny <<< "Hello World"
          python3 -m bergamot translate --model en-de-tiny de-en-tiny <<< "Hello World"

      - name: ccache epilog
        run: 'ccache -s # Print current cache stats'

      - uses: actions/upload-artifact@v2
        with:
            path: ${{github.workspace}}/dist/bergamot-*.whl


    python-macos:
      name: "macos pybindings"
      runs-on: "macos-10.15"
      steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install Dependencies
        run: |-
          brew update
          brew install openblas protobuf ccache boost pybind11 
          brew install coreutils findutils libarchive 

      - name: Generate ccache_vars for ccache based on machine
        shell: bash
        id: ccache_vars
        run: |-
          echo "::set-output name=hash::$(echo ${{ env.ccache_compilercheck }})"
          echo "::set-output name=timestamp::$(date '+%Y-%m-%dT%H.%M.%S')"
      - name: Cache-op for build-cache through ccache
        uses: actions/cache@v2
        with:
          path: ${{ env.ccache_dir }}
          key: ccache-${{ job.id }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}-${{ steps.ccache_vars.outputs.timestamp }}
          restore-keys: |-
            ccache-${{ job.id }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}
            ccache-${{ job.id }}-${{ steps.ccache_vars.outputs.hash }}
            ccache-${{ job.id }}

      - name: ccache environment setup
        run: |-
          echo "CCACHE_COMPILER_CHECK=${{ env.ccache_compilercheck }}" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=${{ env.ccache_basedir }}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=${{ env.ccache_compress }}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=${{ env.ccache_compresslevel }}" >> $GITHUB_ENV
          echo "CCACHE_DIR=${{ env.ccache_dir }}" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=${{ env.ccache_maxsize }}" >> $GITHUB_ENV

      - name: ccache prolog
        run: |-
          ccache -s # Print current cache stats
          ccache -z # Zero cache entry

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: "${{ github.workspace }}/qt/"
          key: qt-${{job.name }}-${{ env.qt_version }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          version: ${{ env.qt_version }}
          dir: "${{ github.workspace }}/qt/"


      - name: Apply required patches
        run: |-
            patch -p1 < patches/01-marian-fstream-for-macos.patch

      # Appears to be required per GitHub CI; 
      - name: Set MACOSX DEPLOYMENT TARGET via environment variable
        run: |-
            echo "MACOSX_DEPLOYMENT_TARGET=10.15" >> $GITHUB_ENV

      - name: setup.py 
        run: |-
          ${pythonLocation}/bin/python3 -m pip install --upgrade packaging wheel
          BUILD_ARCH=core-avx-i ${pythonLocation}/bin/python3 setup.py bdist_wheel --universal

      # We're happy with just compile for the moment, so cache gets some seeding.
      - name: Install onto root python lib
        run: |-
          python3 -m pip install dist/bergamot-*.whl 

      - name: Fetch models from translateLocally repository.
        run: |-
          python3 -m bergamot download 

      - name: Run the sample python script shipped with module
        run: |-
          python3 -m bergamot translate --model en-de-tiny <<< "Hello World"
          python3 -m bergamot translate --model en-de-tiny de-en-tiny <<< "Hello World"

      - name: ccache epilog
        run: 'ccache -s # Print current cache stats'

      - uses: actions/upload-artifact@v2
        with:
            path: ${{github.workspace}}/dist/bergamot-*.whl

  # Try to upload a release using https://github.com/marvinpinto/actions/issues/177#issuecomment-917605585 as a model
    release-latest:
      name: Release Latest Build
      runs-on: ubuntu-latest
      needs: [python-ubuntu, python-macos]
      if: github.ref == 'refs/heads/main'
      steps:
       - name: Download artifacts
         uses: actions/download-artifact@v2
  
       - name: Update GitHub prerelease
         uses: marvinpinto/action-automatic-releases@latest
         with:
           repo_token: ${{ secrets.GITHUB_TOKEN }}
           automatic_release_tag: latest
           prerelease: true
           title: "Latest Build"
           files: |
                  ${{github.workspace}}/artifact/*.whl
  
    release-version:
      name: Release version 
      runs-on: ubuntu-latest
      needs: [python-ubuntu, python-macos]
      if: startsWith(github.ref, 'refs/tags/v')
      steps:
       - name: Download artifacts
         uses: actions/download-artifact@v2
  
       - name: Update GitHub release
         uses: marvinpinto/action-automatic-releases@latest
         with:
           repo_token: ${{ secrets.GITHUB_TOKEN }}
           automatic_release_tag: ${{ github.ref_name }}
           prerelease: false
           title: "${{ github.ref_name }}"
           files: |
                  ${{github.workspace}}/artifact/*.whl
  
